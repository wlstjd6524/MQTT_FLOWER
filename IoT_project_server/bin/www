#!/usr/bin/env node
/* 
- 모듈 및 애플리케이션 초기화
../app은 애플리케이션을 정의한 파일을 가져오고, 
debug와 http 모듈을 불러온다.
*/

var app = require('../app');
var debug = require('debug')('iotserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

// 포트 설정 및 HTTP Server Create.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Connect Mongo DB 
var mongoDB = require("mongodb").MongoClient;
var url = "mongodb://127.0.0.1:27017/";
var db = null;
mongoDB.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, function(err, client){
  if (err) {
    console.error("MongoDB connection error: ", err);
  } else {
    db = client;
    console.log("DB connected");
  }
});

/**
 * MQTT subscriber (MQTT Server connection & Read resource data)
 */
var mqtt = require("mqtt");
const { stringify } = require('querystring');
var client = mqtt.connect("mqtt://127.0.0.1")

// 접속에 성공하면, 꽃가루농도 위험지수 토픽을 구독.
client.on("connect", function(){
  client.subscribe("pollen");
  console.log("Subscribing pollen");
})

// MQTT 응답 메세지 수신시 동작
/* 
MQTT 메시지를 수신하면 해당 메시지를 JSON 객체로 변환하고 현재 날짜를 추가한다.
pollen 토픽의 메시지는 MongoDB에 저장.
*/
client.on("message", function(topic, message){
  console.log(topic+ ": " + message.toString()); // 수신한 메세지 Topic 출력
  var obj = JSON.parse(message); // 수신한 메세지의 데이터를 obj 저장
  obj.create_at = new Date(); // 현재 날짜 데이터를 obj에 추가함.
  console.log(obj);
   // 수신한 메세지를 Mongo DB에 저장
  if (topic == "pollen"){ // 만약 토픽이 꽃가루농도라면,
    var cursor = db.db("Resources").collection("Pollen");
    cursor.insertOne(obj, function(err, result){
      if(err){console.log(err);}
      else{console.log("Data inserted into MongoDB: " + JSON.stringify(result));}
    });
  }
});
  
 // get data from MongoDB and then send it to HTML page using socket
 // Socket 통신 설정
 // 소켓 서버를 설정하고 클라이언트 연결을 처리.
 // 클라이언트가 socket_evt_update 이벤트를 발생시키면 MongoDB에서 최근 꽃가루 농도 데이터를 가져와 클라이언트에 전송.
 // Mongo DB에서 최근 데이터 불러와서, HTML 페이지에 업데이트
var io = require("socket.io")(server);
io.on("connection", function(socket){
  socket.on("socket_evt_update", function(data){
    // 꽃가루농도 데이터
    var cursor = db.db("Resources").collection("Pollen");
    var options = {sort:{"_id":-1}, projection: {_id:0, pollen:1, create_at:1},};
    var sending_data = cursor.find({},options).limit(1);
    sending_data.toArray(function(err,results){
      if(!err){
        socket.emit("socket_up_pm", JSON.stringify(results[0]));
      }
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

// 서버 리스닝 설정
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

/* 
normalizePort 함수는 포트 값을 숫자, 문자열 또는 false로 반환.
onError 함수는 서버 에러를 처리.
onListening 함수는 서버가 리스닝을 시작할 때 호출.
*/
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
